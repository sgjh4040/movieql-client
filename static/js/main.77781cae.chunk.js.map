{"version":3,"sources":["assets/icons/logo.png","apolloClient.js","queries.js","Components/Movie.js","Components/loader.js","Home.js","Movie.js","Components/MovieIntroBox.js","util.js","Components/RecommendBox.js","Routes/Detail/Detail.js","Routes/Detail/TvDetail.js","Routes/Tv/Tv.js","Routes/Detail/PersonDetail.js","Styles/GlobalStyles.js","Styles/Theme.js","Components/Header/Header.js","Hooks/useInput.js","App.js","index.js"],"names":["module","exports","client","ApolloClient","uri","MOVIES","gql","MOVIE_DETAILS","TVs","TV_DETAILS","PERSON_DETAIL","Card","styled","div","MovieImage","props","background","IntroBox","IntroHeader","Title","span","Date","Overview","p","DetailBox","Link","progressStyle","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","Movie","from","index","id","title","overview","poster","vote_average","rating","release_date","useState","percent","setPercent","useEffect","key","style","width","styles","value","maxValue","text","marginLeft","to","goTopage","PropType","number","isRequired","string","override","css","size","color","Wrapper","h2","MoviesContainer","Home","page","setTitle","category","setCategory","language","useQuery","variables","data","loading","console","log","textAlign","Select","native","onChange","e","target","movies","map","movie","poster_path","Container","Section","section","Image","img","ReleaseDate","HeaderInfo","H2","MovieIntroBox","setTimeout","tv","src","marginBottom","name","first_air_date","addComma","num","toString","replace","Wrap","Description","VoteAverage","Meta","RecommendBox","releaseEl","useRef","presentBox","current","hidden","unpresentBox","onMouseOver","onMouseLeave","backdrop_path","fontSize","ref","useStyles","makeStyles","theme","button","marginRight","spacing","url","WrapperBack","UnderLine","FlexBox","Column","h1","GreyColumn","CreditContainer","ol","CreditBox","li","NameBox","Name","a","Charactor","Label","GenreButton","Button","RecommendContainer","Detail","movieId","match","params","parseInt","error","classes","topCredits","credits","slice","credit","profile_path","charactor","suggestions","original_title","status","runtime","budget","revenue","genres","genre","className","variant","keywords","keyword","tvId","tvCredits","tvSuggestions","original_name","Tv","tvs","PersonDetail","personId","createGlobalStyle","reset","bgColor","blackColor","blueColor","darkGreenColor","maxWidth","darkGreyColor","lightGreyColor","redColor","darkBlueColor","boxBorder","borderRadius","whiteBox","HeaderBox","header","Logo","CategoryBox","Category","SearchBox","SearchInput","input","Header","term","defaultValue","setValue","useInput","onKeyPress","event","which","preventDefault","logo","placeholder","App","Theme","GlobalStyles","exact","path","component","TvDetail","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77781cae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c2fdb0f3.png\";","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n    // uri:\"https://pacific-beyond-15227.herokuapp.com/\"\n    uri:\"http://localhost:4000\"\n\n})\n\nexport default client\n","import gql from \"graphql-tag\";\n\n\n\nexport const MOVIES = gql`\n    query movies($page:Int,$language:String,$category:String){\n        movies(page:$page, language:$language, category: $category){\n            title\n            id\n            genre_ids\n            overview\n            poster_path\n            vote_average\n            release_date\n        }\n    }\n`\n\nexport const NOW_PLAY_MOVIE = gql`\n    query{\n        nowPlayMovies(page:1){\n        title\n        id\n        genre_ids\n        overview\n        poster_path\n        vote_average\n        release_date\n        }\n    }\n\n`;\nexport const DRAMA_PAGE = gql`\n    query{\n        movies(page:1){\n        title\n        id\n        genre_ids\n        overview\n        poster_path\n        vote_average\n        }\n    }\n`;\nexport const MOVIE_DETAILS = gql`\n    query getMovieDetail($movieId:Int!){\n        movie(id:$movieId){\n            title\n            id\n            genre_ids\n            overview\n            poster_path\n            vote_average\n            release_date\n            backdrop_path\n            original_title\n            status\n            runtime\n            budget\n            revenue\n            genres{\n                    id\n                    name\n                }\n\n        }\n        suggestions(id:$movieId){\n            title\n            id\n            genre_ids\n            overview\n            poster_path\n            vote_average\n            backdrop_path\n            release_date\n        }\n        credits(id:$movieId){\n            id\n            profile_path\n            character\n            gender\n            name\n        }\n        keywords(id:$movieId){\n            id\n            name\n        }\n    }\n`;\nexport const TVs = gql`\n    query tvs($page:Int,$language:String,$category:String){\n        tvs(page:$page, language:$language, category: $category){\n            id\n            name\n            overview\n            vote_average\n            poster_path\n            first_air_date\n        }\n    }\n`;\nexport const TV_DETAILS = gql`\n    query Tv($tvId:Int!,$language:String){\n        tv(id:$tvId, language:$language){\n            name\n            id\n            overview\n            poster_path\n            vote_average\n            first_air_date\n            backdrop_path\n            original_name\n            status\n            genres{\n                    id\n                    name\n                }\n        }\n        tvCredits(id:$tvId, language:$language){\n            id\n            profile_path\n            character\n            gender\n            name\n        }\n        tvSuggestions(id:$tvId, language:$language){\n            name\n            id\n            vote_average\n            backdrop_path\n            first_air_date\n        }\n        keywords(id:$tvId){\n            id\n            name\n        }\n    }\n`;\n\nexport const PERSON_DETAIL = gql`\n    query person($personId:Int!,$language:String){\n        person(id:$personId, language:$language){\n            id\n            birthday\n            biography\n            known_for_department\n            place_of_birth\n            homepage\n            name\n            gender\n            order\n            profile_path\n\n        }\n        personTvCredits(id:$personId, language:$language){\n            id\n        }\n        personMovieCredits(id:$personId, language:$language){\n            id\n        }\n    }\n`;","import React, {useState,useEffect}  from \"react\";\nimport PropType from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: row;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n  background-size: cover;\n  background-position: center center;\n  height: 280px;\n  width: 470px;\n  position: relative;\n  margin:5px;\n`;\n\nconst MovieImage = styled.div`\n  background-image: ${props => `url(${props.background})`};\n  background-size: cover;\n  background-position: center center;\n  width: 185px;\n    height: 280px;\n`\n\nconst IntroBox = styled.div`\n  display:flex;\n  position:relative;\n  flex-direction: column;\n  padding: 10px 16px 16px;\n  width: 298px;\n`;\nconst IntroHeader = styled.div`\n  display:inherit;\n  flex-direction: row;\n`;\nconst Title = styled.span`\n  font-size:1.1em;\n  line-height:1.1em;\n  color: #000000;\n  margin-bottom:2px;\n`;\nconst Date = styled.span`\n  display:block;\n  color:#757575;\n  font-size:1.1em;\n`;\nconst Overview = styled.p`\n  white-space: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-top:30px;\n  color:#4d4d4d;\n  font-size: 1.1em;\n  line-height:1.2em;\n  height: 7em;\n`\nconst DetailBox = styled(Link)`\n    width:100%;\n    border-top: 1px solid #e3e3e3;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    padding: 16px;\n    color:#4d4d4d;\n`;\n\n\nconst progressStyle = buildStyles({\n\n  // Rotation of path and trail, in number of turns (0-1)\n  rotation: 0,\n\n  // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n  strokeLinecap: 'round',\n\n  // Text size\n  textSize: '30px',\n\n  // How long animation takes to go from one percentage to another, in seconds\n  pathTransitionDuration: 2,\n\n  // Can specify path transition in more detail, or remove it entirely\n  // pathTransition: 'none',\n\n  // Colors\n  pathColor: '#D3D454',\n  textColor: '#FFFFFF',\n  trailColor: '#413D17',\n  backgroundColor: '#0D1C21',\n})\n\nconst Movie = ({from, index, id, title, overview, poster, rating, vote_average, release_date }) => {\n       \n       const [percent,setPercent] = useState(0);\n\n       const goTopage = from => {\n         if(from===\"movie\"){\n           return (\n            <DetailBox to={`/details/${id}`}>\n            더보기\n          </DetailBox>\n           )\n         }else if(from === \"tv\"){\n           return(\n            <DetailBox to={`/tv/${id}`}>\n            더보기\n          </DetailBox>\n           )\n         }\n       }\n\n       useEffect(()=>{\n         setPercent(vote_average);\n       },[percent])\n\n  return (\n    <Card key={index}>\n      <MovieImage background={`https://image.tmdb.org/t/p/w500${poster}`} />\n      <IntroBox>\n        <IntroHeader>\n          <div style={{ width: '38px' }}>\n            \n            <CircularProgressbar styles={progressStyle} background={true} value={percent} maxValue={10} text={`${vote_average * 10}%`} />\n          </div>\n          <div style={{ width: '100%', marginLeft: '10px' }}>\n            <Title>\n              {title}\n            </Title>\n            <Date>\n              {release_date}\n            </Date>\n          </div>\n        </IntroHeader>\n        <Overview>\n          {overview}\n        </Overview>\n        {goTopage(from)}\n      </IntroBox>\n    </Card>\n  )\n}\nMovie.PropType = {\n  id: PropType.number.isRequired,\n  title: PropType.string.isRequired,\n  overview: PropType.string.isRequired,\n  poster: PropType.string.isRequired\n}\n\nexport default Movie;","import React  from \"react\";\nimport { css } from \"@emotion/core\";\nimport { ClockLoader } from \"react-spinners\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nexport default ({size=50, color=\"#0D1C23\"})=> <ClockLoader css={override} size={size} color={color}/>","import React, { useState } from \"react\";\nimport { useQuery } from 'react-apollo-hooks';\nimport { MOVIES } from \"./queries\";\nimport styled from \"styled-components\";\nimport Movie from \"./Components/Movie\";\nimport IconButton from 'material-ui/IconButton';\nimport Select from '@material-ui/core/Select';\nimport Loader from \"./Components/loader\";\n\n\n\nconst Wrapper = styled.div`\n    margin: 0 auto;\n  display: block;\n  min-height: 80vh;\n  max-width: 1000px;\n\n`;\nconst Title = styled.h2`\n    font-size: 24px;\n    margin-bottom: 15px;\n`;\n\nconst MoviesContainer = styled.div`\n    display:flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n`;\n\n\nconst Home = () => {\n    const [page, setPage] = useState(1);\n    const [title,setTitle] = useState('현재 상영작');\n    const [category, setCategory] = useState('now_playing');\n    const [language, setLanguage] = useState('ko-kr');\n\n    const { data, loading } = useQuery(MOVIES, {\n        variables: {\n            page,\n            category,\n            language\n        }\n    });\n\n    const handleChange = (e) => {\n        console.log(\"click\")\n        setCategory(e.target.value);\n        switch (e.target.value){\n            case 'popular':\n                setTitle(\"인기작\");\n                break;\n            case 'top_rated':\n                setTitle(\"평가굿\");\n                break;\n            case 'upcoming':\n                    setTitle(\"상영 예정작\");\n                    break;\n            default:\n                    setTitle(\"상영중\");\n                        \n        }\n    }\n\n\n\n    if (loading) {\n        return <Loader/>\n    } else {\n        console.log(data);\n        return (\n            <Wrapper>\n                <Title>\n                    {title}\n                </Title>\n                <div style={{textAlign:\"end\"}}>\n                <Select\n                    native\n                    value={category}\n                    onChange={handleChange}>\n                    <option value=\"now_playing\">상영중</option>\n                    <option value=\"popular\">인기작</option>\n                    <option value=\"top_rated\">평가굿</option>\n                    <option value=\"upcoming\">상영 예정작</option>\n                </Select>\n                </div>\n\n                <MoviesContainer>\n                    {data.movies.map((movie, index) => (\n                        <Movie\n                            from=\"movie\"\n                            key={index}\n                            index\n                            id={movie.id}\n                            poster={movie.poster_path}\n                            overview={movie.overview}\n                            title={movie.title}\n                            rating={movie.vote_average}\n                            vote_average={movie.vote_average}\n                            release_date={movie.release_date}\n                        />\n                    ))}\n                </MoviesContainer>\n\n\n            </Wrapper>\n        )\n\n    }\n}\n\n// const Home = () =>\n\n//     <Container> \n//         <Query query={HOME_PAGE}>{({ loading, data, error }) => {\n//             if (loading) return <span>loading</span>;\n//             if (error) return <span>something happened</span>;\n//             console.log(data);\n//             return data.movies.map((movie, index) => (\n//                 <Movie key={index}\n//                     index\n//                     id={movie.id}\n//                     poster={movie.poster_path}\n//                     overview={movie.overview}\n//                     title={movie.title}\n//                     rating={movie.vote_average}\n//                 >\n//                 </Movie>\n//             ));\n//         }}\n//         </Query>\n//     </Container>\nexport default Home;\n","import React from \"react\";\nimport PropType from \"prop-types\";\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  border-radius: 15px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n  background-image: ${props => `url(${props.background})`};\n  background-size: cover;\n  background-position: center center;\n  height: 300px;\n  width: 200px;\n  margin-bottom: 40px;\n  position: relative;\n`;\nconst Title = styled.span`\n  background-color: white;\n  width: auto;\n  padding: 10px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n  position: absolute;\n  bottom: 25px;\n  left: 0;\n  right: 0;\n  margin: auto;\n  font-weight:600;\n`;\n\nconst Movie = ({index,id,title,overview,poster,rating,vote_average,release_date})=>(\n    <Link to={`/details/${id}`} >\n        <Card background={`https://image.tmdb.org/t/p/w500${poster}`}>\n            <Title>\n            {title}/⭐{rating}\n            </Title>\n\n        </Card>\n\n    </Link>\n)\nMovie.PropType = {\n    id: PropType.number.isRequired,\n    title: PropType.string.isRequired,\n    overview: PropType.string.isRequired,\n    poster: PropType.string.isRequired\n}\n\nexport default Movie;","import React, {useState,useEffect} from \"react\";\nimport styled from \"styled-components\";\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\n\nconst Container = styled.div`\n    width: 100%;\n    margin: 0 auto;\n    padding-top: 40px;\n    padding-bottom: 40px;\n    z-index: 0;\n    background: transparent;\n    @media (min-width: 576px){\n        width: 100%;\n    }\n    @media (min-width: 768px){\n        width: 1000px;\n        \n    }\n`;\n\nconst Section = styled.section`\n    display:flex;\n    flex-direction: column;\n@media (min-width: 576px){\n        flex-direction: row;\n    }\n`;\nconst Image = styled.img`\n    display: block;\n    border-radius: 2px;\n    width: 200px;\n    height: 300px;\n    border-width: 0px;\n    outline: none;\n    margin-bottom:20px;\n    @media (min-width: 576px){\n        width: 300px;\n        height: 450px;\n        margin-bottom:0;\n    }\n`;\nconst IntroBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding-left: 40px;\n    padding-right:40px;\n    width:100%;\n    @media (min-width: 576px){\n\n    }\n`;\nconst Title = styled.h2`\n    margin: 0;\n    padding: 0;\n    font-size: 2.4em;\n    line-height: 1.1em;\n    font-weight: 700;\n    display: inline-block;\n    color: #ffffff;\n\n`;\nconst ReleaseDate = styled.span`\n    opacity: 0.6;\n    font-size: 1.7em;\n    font-weight: 400;\n    color: #ffffff;\n`;\n\nconst HeaderInfo = styled.div`\n    color: #ffffff;\n`;\nconst H2 = styled.h2`\n    font-weight: 600;\n    line-height: 1.3em;\n    font-size: 1.3em;\n    margin-bottom: 10px;\n`;\nconst Overview = styled.div`\n    font-size: 1.2em;\n    line-height: 1.4em;\n\n`\n\nconst progressStyle = buildStyles({\n\n    // Rotation of path and trail, in number of turns (0-1)\n    rotation: 0,\n  \n    // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n    strokeLinecap: 'round',\n  \n    // Text size\n    textSize: '30px',\n  \n    // How long animation takes to go from one percentage to another, in seconds\n    pathTransitionDuration: 2,\n  \n    // Can specify path transition in more detail, or remove it entirely\n    // pathTransition: 'none',\n  \n    // Colors\n    pathColor: '#D3D454',\n    textColor: '#FFFFFF',\n    trailColor: '#413D17',\n    backgroundColor: '#0D1C21',\n  })\n\n\nconst MovieIntroBox = ({from,data}) => {\n    console.log(data)\n    const [percent,setPercent] = useState(0);\n\n       useEffect(()=>{\n           console.log(\"useEffect\")\n           setTimeout(()=> {\n               if(from===\"movie\"){\n                setPercent(data.movie.vote_average)\n               }else if(from === \"tv\"){\n                setPercent(data.tv.vote_average)\n               }\n           },100);\n       },[percent])\n\n       if(from ===\"movie\"){\n        return (\n            <Container>\n                <Section>\n                    <Image src={`https://image.tmdb.org/t/p/w500${data.movie.poster_path}`}></Image>\n                    <IntroBox>\n                        <div style={{marginBottom:'30px'}}>\n                            <Title>\n                                {data.movie.title}\n                            </Title>\n                            <ReleaseDate>\n                                {`(${data.movie.release_date})`}\n                            </ReleaseDate>\n                        </div>\n                        <div style={{ width: '60px', marginBottom:'30px' }}>\n                        <CircularProgressbar styles={progressStyle} background={true} value={percent} maxValue={10} text={`${percent * 10}%`} />\n                        </div>\n                        <HeaderInfo>\n                            <H2>\n                                개요\n                            </H2>\n                            <Overview>\n                                {data.movie.overview}\n                            </Overview>\n    \n                        </HeaderInfo>\n    \n                    </IntroBox>\n                </Section>\n    \n            </Container>\n        )\n       }else if(from===\"tv\"){\n        return (\n            <Container>\n                <Section>\n                    <Image src={`https://image.tmdb.org/t/p/w500${data.tv.poster_path}`}></Image>\n                    <IntroBox>\n                        <div style={{marginBottom:'30px'}}>\n                            <Title>\n                                {data.tv.name}\n                            </Title>\n                            <ReleaseDate>\n                                {`(${data.tv.first_air_date})`}\n                            </ReleaseDate>\n                        </div>\n                        <div style={{ width: '60px', marginBottom:'30px' }}>\n                        <CircularProgressbar styles={progressStyle} background={true} value={percent} maxValue={10} text={`${percent * 10}%`} />\n                        </div>\n                        <HeaderInfo>\n                            <H2>\n                                개요\n                            </H2>\n                            <Overview>\n                                {data.tv.overview}\n                            </Overview>\n    \n                        </HeaderInfo>\n    \n                    </IntroBox>\n                </Section>\n    \n            </Container>\n        )\n       }\n    \n}\n\nexport default MovieIntroBox;","import moment from 'moment';\n\nexport const addComma = num => {\n    const regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n    return num.toString().replace(regexp, ',');\n}","import React,{useRef,useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport StarIcon from '@material-ui/icons/Star';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\n\nconst Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 250px;\n    height: 141px;\n    margin: 0 15px 0 0;\n`;\n\nconst Image = styled.img`\n    width: 250px;\n    height: 141px;\n    border-radius: 4px;\n`;\n\nconst Description = styled.div`\n    display:flex;\n    justify-content: space-between;\n    margin-top: 4px;\n`;\nconst Title = styled.span`\n    font-weight: 400;\n    font-size: 1em;\n    padding-right: 10px;\n    color: #000;\n`;\nconst VoteAverage = styled.span`\n    padding-top: 0;\n    margin-right: 0;\n    display: inline-flex;\n    align-items: center;\n`;\nconst Meta = styled.div`\n    display:flex;\n    position: absolute;\n    width:100%;\n    left: 0;\n    bottom: 0;\n    padding-left: 5px;\n    padding-right: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    background-color: rgba(255,255,255,0.9);\n`;\nconst ReleaseDate = styled.div`\n    line-height: 1em;\n    font-size: 1em;\n    display: inline-flex;\n    align-items: center;\n`\n\n\nconst RecommendBox = ({\n    from,\n    data }) => {\n        const releaseEl = useRef(null);\n\n\n        const presentBox = () =>{\n            releaseEl.current.hidden= false;\n        }\n        const unpresentBox = () =>{\n            releaseEl.current.hidden= true;\n        }\n\n        useEffect(()=>{\n            releaseEl.current.hidden=true;\n        },[])\n\n    if(from === \"movie\"){\n        return (\n            <Wrap onMouseOver={presentBox} onMouseLeave={unpresentBox}>\n                <Link to={`/details/${data.id}`}>\n                    <Image src={`https://image.tmdb.org/t/p/w250_and_h141_face${data.backdrop_path}`} />\n                </Link>\n                <Description>\n                    <Title>\n                        {data.title}\n                    </Title>\n                    <VoteAverage>\n                        {data.vote_average}\n                        <StarIcon fontSize=\"small\"/>\n                    </VoteAverage>\n                    \n                </Description>\n                <Meta ref={releaseEl}>\n                    <ReleaseDate >\n                        <DateRangeIcon fontSize=\"small\"/>\n                        {data.release_date}\n                    </ReleaseDate>\n                </Meta>\n            </Wrap>\n        )\n    }else if (from === \"tv\"){\n        return (\n            <Wrap onMouseOver={presentBox} onMouseLeave={unpresentBox}>\n                <Link to={`/tv/${data.id}`}>\n                    <Image src={`https://image.tmdb.org/t/p/w250_and_h141_face${data.backdrop_path}`} />\n                </Link>\n                <Description>\n                    <Title>\n                        {data.name}\n                    </Title>\n                    <VoteAverage>\n                        {data.vote_average}\n                        <StarIcon fontSize=\"small\"/>\n                    </VoteAverage>\n                    \n                </Description>\n                <Meta ref={releaseEl}>\n                    <ReleaseDate >\n                        <DateRangeIcon fontSize=\"small\"/>\n                        {data.first_air_date}\n                    </ReleaseDate>\n                </Meta>\n            </Wrap>\n        )\n    }\n}\n\nexport default RecommendBox","import React from \"react\";\nimport { useQuery } from 'react-apollo-hooks';\nimport { MOVIE_DETAILS } from \"../../queries\";\nimport styled from \"styled-components\";\nimport Movie from \"../../Movie\";\nimport MovieIntroBox from \"../../Components/MovieIntroBox\";\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { addComma } from \"../../util\";\nimport Loader from \"../../Components/loader\";\nimport RecommendBox from \"../../Components/RecommendBox\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n}));\n\nconst Wrapper = styled.div`\nbackground-image : url(${props => `https://image.tmdb.org/t/p/w500${props.url}`});\n    display: block;\n    min-height: 80vh;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: 50% 50%;\n    z-index:-1;\n`;\nconst WrapperBack = styled.div`\n    width:100%;\n    height:100%;\n    background-color: rgba( 0, 0, 0, 0.7);\n    min-height: 80vh;\n    \n`;\n\nconst Card = styled.div`\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n    background-color: white;\n    border-radius: 7px;\n    width:100%;\n`;\n\nconst UnderLine = styled.div`\n    border-bottom:1px solid #D7D7D7;\n`;\n\nconst FlexBox = styled.div`\n    display:flex;\n    flex-direction: column;\n    @media (min-width: 576px){\n        flex-direction: row;\n    }\n    @media (min-width: 768px){\n        flex-direction: row;\n    }\n`;\nconst Column = styled.div`\n    display:inherit;\n    flex-direction: column;\n    width:100%;\n    margin-left: 1%;\n    margin-right: 50px;\n    @media (min-width: 576px){\n        width:70%;\n        margin-left: 2%;\n    }\n    @media (min-width: 768px){\n        width:70%;\n        margin-left: 5%;\n    }\n`;\nconst Title = styled.h1`\n    padding-top:40px;\n    font-size: 24px;\n    margin-bottom: 20px;\n    \n`\nconst GreyColumn = styled.div`\n    width: 100%;\n    padding: 10px;\n    padding-top:40px;\n    background-color:#F0F0F0;\n    @media (min-width: 576px){\n        width: 30%;\n    }\n    @media (min-width: 768px){\n        width: 30%;\n    }\n`;\n\nconst CreditContainer = styled.ol`\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    overflow:scroll;\n    margin-bottom: 30px;\n`;\nconst CreditBox = styled.li`\n    border: 1px solid #e3e3e3;\n    padding-bottom: 10px;\n    width: 140px;\n    background-color: #fff;\n    box-sizing: border-box;\n    margin-right: 10px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\nconst NameBox = styled.p`\n    padding: 10px 10px 0 10px;\n  font-size: 1em;\n    line-height: 1.4em;\n    margin: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\nconst Name = styled.a`\n    font-weight: bold;\n    color: #000;\n`;\nconst Charactor = styled.p`\n    padding: 0 10px;\n  font-size: 0.9em;\n  line-height: 1.4em;\n    margin: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\nconst Wrap = styled.div`\n    font-size: 1rem;\n    color: #000;\n    margin-bottom: 15px;\n    @media (min-width: 576px){\n        font-size: 1.1rem;\n    }\n`;\nconst Label = styled.div`\n    font-size: 1.2rem;\n    margin-bottom:10px;\n    font-weight:700;\n    @media (min-width: 576px){\n        font-size: 1.3rem;\n    }\n`;\nconst GenreButton = styled(Button)`\n    margin-right: 5px;\n`;\nconst RecommendContainer = styled.div`\n    overflow-y: hidden;\n    overflow-x: scroll;\n    white-space: nowrap;\n    box-sizing: border-box;\n    padding-bottom: 16px;\n`;\n\nconst Detail = ({\n    match: {\n        params: { movieId }\n    }\n}) => {\n   \n    const { data, loading, error } = useQuery(MOVIE_DETAILS, {\n        variables: {\n            movieId: parseInt(movieId)\n        }\n    });\n    const classes = useStyles();\n\n  \n    \n    if (loading) return <Loader/>\n    if (error) return \"error\";\n    const topCredits = data.credits.slice(0, 5);\n\n    return (\n        <>\n            <Wrapper url={data.movie.backdrop_path}>\n                <WrapperBack>\n                    <MovieIntroBox from=\"movie\" data={data} />\n                </WrapperBack>\n            </Wrapper>\n\n            <FlexBox>\n                <Column >\n                    <Title>\n                        주요 출연진\n                </Title>\n                    <CreditContainer>\n                        {topCredits.map(credit => (\n                            <CreditBox>\n                                <a>\n                                    <img src={`https://image.tmdb.org/t/p/w138_and_h175_face${credit.profile_path}`}>\n                                    </img>\n                                </a>\n                                <NameBox>\n                                    <Name>\n                                        {credit.name}\n                                    </Name>\n                                </NameBox>\n                                <Charactor>\n                                    {credit.charactor}\n                                </Charactor>\n                            </CreditBox>\n                        ))}\n                    </CreditContainer>\n                    <UnderLine />\n                    <Title>\n                        추천 작품\n                </Title>\n                    <RecommendContainer>\n                        {data.suggestions.map(movie => <RecommendBox from=\"movie\" data={movie}/>)}\n                    </RecommendContainer>\n                    \n                </Column>\n                <GreyColumn>\n                    <Wrap>\n                        <Label>\n                            원재\n                        </Label>\n                        {data.movie.original_title}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            상태\n                        </Label>\n                        {data.movie.status}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            원어\n                        </Label>\n                        영어\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            상영시간\n                        </Label>\n                        {data.movie.runtime} 분\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            제작비\n                        </Label>\n                        ${addComma(data.movie.budget)}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            수익\n                        </Label>\n                        ${addComma(data.movie.revenue)}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            장르\n                        </Label>\n                        {data.movie.genres.map(genre => <GenreButton className={classes.button} size=\"small\" variant=\"outlined\">{genre.name}</GenreButton>)}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            키워드\n                        </Label>\n                        {data.keywords.map(keyword => <GenreButton className={classes.button} size=\"small\" variant=\"outlined\">{keyword.name}</GenreButton>)}\n                    </Wrap>\n                </GreyColumn>\n            </FlexBox>\n\n\n\n        </>\n    )\n}\nexport default Detail;\n","import React, {useState} from \"react\";\nimport { useQuery } from 'react-apollo-hooks';\nimport { TV_DETAILS } from \"../../queries\";\nimport styled from \"styled-components\";\nimport MovieIntroBox from \"../../Components/MovieIntroBox\";\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { addComma } from \"../../util\";\nimport Loader from \"../../Components/loader\";\nimport RecommendBox from \"../../Components/RecommendBox\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n}));\n\nconst Wrapper = styled.div`\nbackground-image : url(${props => `https://image.tmdb.org/t/p/w500${props.url}`});\n    display: block;\n    min-height: 80vh;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: 50% 50%;\n    z-index:-1;\n`;\nconst WrapperBack = styled.div`\n    width:100%;\n    height:100%;\n    background-color: rgba( 0, 0, 0, 0.7);\n    min-height: 80vh;\n    \n`;\n\nconst Card = styled.div`\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n    background-color: white;\n    border-radius: 7px;\n    width:100%;\n`;\n\nconst UnderLine = styled.div`\n    border-bottom:1px solid #D7D7D7;\n`;\n\nconst FlexBox = styled.div`\n    display:flex;\n    flex-direction: column;\n    @media (min-width: 576px){\n        flex-direction: row;\n    }\n    @media (min-width: 768px){\n        flex-direction: row;\n    }\n`;\nconst Column = styled.div`\n    display:inherit;\n    flex-direction: column;\n    width:100%;\n    margin-left: 1%;\n    margin-right: 50px;\n    @media (min-width: 576px){\n        width:70%;\n        margin-left: 2%;\n    }\n    @media (min-width: 768px){\n        width:70%;\n        margin-left: 5%;\n    }\n`;\nconst Title = styled.h1`\n    padding-top:40px;\n    font-size: 24px;\n    margin-bottom: 20px;\n    \n`\nconst GreyColumn = styled.div`\n    width: 100%;\n    padding: 10px;\n    padding-top:40px;\n    background-color:#F0F0F0;\n    @media (min-width: 576px){\n        width: 30%;\n    }\n    @media (min-width: 768px){\n        width: 30%;\n    }\n`;\n\nconst CreditContainer = styled.ol`\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    overflow:scroll;\n    margin-bottom: 30px;\n`;\nconst CreditBox = styled.li`\n    border: 1px solid #e3e3e3;\n    padding-bottom: 10px;\n    width: 140px;\n    background-color: #fff;\n    box-sizing: border-box;\n    margin-right: 10px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\nconst NameBox = styled.p`\n    padding: 10px 10px 0 10px;\n  font-size: 1em;\n    line-height: 1.4em;\n    margin: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\nconst Name = styled.a`\n    font-weight: bold;\n    color: #000;\n`;\nconst Charactor = styled.p`\n    padding: 0 10px;\n  font-size: 0.9em;\n  line-height: 1.4em;\n    margin: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\nconst Wrap = styled.div`\n    font-size: 1rem;\n    color: #000;\n    margin-bottom: 15px;\n    @media (min-width: 576px){\n        font-size: 1.1rem;\n    }\n`;\nconst Label = styled.div`\n    font-size: 1.2rem;\n    margin-bottom:10px;\n    font-weight:700;\n    @media (min-width: 576px){\n        font-size: 1.3rem;\n    }\n`;\nconst GenreButton = styled(Button)`\n    margin-right: 5px;\n`;\nconst RecommendContainer = styled.div`\n    overflow-y: hidden;\n    overflow-x: scroll;\n    white-space: nowrap;\n    box-sizing: border-box;\n    padding-bottom: 16px;\n`;\n\nconst Detail = ({\n    match: {\n        params: { tvId }\n    }\n}) => {\n    const [language, setLanguage] = useState('ko-kr')\n   \n    const { data, loading, error } = useQuery(TV_DETAILS, {\n        variables: {\n            tvId: parseInt(tvId),\n            language\n        }\n    });\n    const classes = useStyles();\n    if(loading) return <Loader/>\n    if (error) return \"error\";\n    console.log(data);\n    const topCredits = data.tvCredits.slice(0, 5);\n\n  \n    return (\n        <>\n            <Wrapper url={data.tv.backdrop_path}>\n                <WrapperBack>\n                    <MovieIntroBox from=\"tv\" data={data} />\n                </WrapperBack>\n            </Wrapper>\n\n            <FlexBox>\n                <Column >\n                    <Title>\n                        주요 출연진\n                </Title>\n                    <CreditContainer>\n                        {topCredits.map(credit => (\n                            <CreditBox key={credit.id}>\n                                <a>\n                                    <img src={`https://image.tmdb.org/t/p/w138_and_h175_face${credit.profile_path}`}>\n                                    </img>\n                                </a>\n                                <NameBox>\n                                    <Name>\n                                        {credit.name}\n                                    </Name>\n                                </NameBox>\n                                <Charactor>\n                                    {credit.charactor}\n                                </Charactor>\n                            </CreditBox>\n                        ))}\n                    </CreditContainer>\n                    <UnderLine />\n                    <Title>\n                        추천 작품\n                </Title>\n                    <RecommendContainer>\n                        {data.tvSuggestions.map(tv => <RecommendBox from=\"tv\" data={tv}/>)}\n                    </RecommendContainer>\n                    \n                </Column>\n                <GreyColumn>\n                    <Wrap>\n                        <Label>\n                            원재\n                        </Label>\n                        {data.tv.original_name}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            상태\n                        </Label>\n                        {data.tv.status}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            원어\n                        </Label>\n                        영어\n                    </Wrap>\n                    \n                    \n                    <Wrap>\n                        <Label>\n                            장르\n                        </Label>\n                        {data.tv.genres.map(genre => <GenreButton key={genre.id} className={classes.button} size=\"small\" variant=\"outlined\">{genre.name}</GenreButton>)}\n                    </Wrap>\n                    <Wrap>\n                        <Label>\n                            키워드\n                        </Label>\n                        {data.keywords.map(keyword => <GenreButton key={keyword.id} className={classes.button} size=\"small\" variant=\"outlined\">{keyword.name}</GenreButton>)}\n                    </Wrap>\n                </GreyColumn>\n            </FlexBox>\n\n\n\n        </>\n    )\n}\nexport default Detail;\n","import React,{useState} from \"react\";\nimport { useQuery } from 'react-apollo-hooks';\nimport {Query} from \"react-apollo\";\nimport styled from \"styled-components\";\nimport { TVs } from \"../../queries\";\nimport Select from '@material-ui/core/Select';\nimport Loader from \"../../Components/loader\";\nimport Movie from \"../../Components/Movie\";\n\n\nconst Wrapper = styled.div`\n    margin: 0 auto;\n  display: block;\n  min-height: 80vh;\n  max-width: 1000px;\n\n`;\nconst Title = styled.h2`\n    font-size: 24px;\n    margin-bottom: 15px;\n`;\n\nconst MoviesContainer = styled.div`\n    display:flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n`;\n\nconst Tv= () =>{\n    const [page, setPage] = useState(1);\n    const [title,setTitle] = useState('현재 상영작');\n    const [category, setCategory] = useState('on_the_air');\n    const [language, setLanguage] = useState('ko-kr');\n\n    const { data, loading } = useQuery(TVs, {\n        variables: {\n            page,\n            category,\n            language\n        }\n    });\n    const handleChange = (e) => {\n        console.log(\"click\")\n        setCategory(e.target.value);\n        switch (e.target.value){\n            case 'popular':\n                setTitle(\"인기작\");\n                break;\n            case 'top_rated':\n                    setTitle(\"평가 굿\");\n                    break;\n            default:\n                    setTitle(\"상영중\");        \n        }\n    }\n    if(loading){\n        return <Loader/>\n    }else{\n\n        return(\n            <Wrapper>\n                <Title>\n                    {title}\n                </Title>\n                <div style={{textAlign:\"end\"}}>\n                <Select\n                    native\n                    value={category}\n                    onChange={handleChange}>\n                    <option value=\"on_the_air\">상영중</option>\n                    <option value=\"popular\">인기작</option>\n                    <option value=\"top_rated\">평가굿</option>\n                </Select>\n                </div>\n\n                <MoviesContainer>\n                    {data.tvs.map((tv, index) => (\n                        <Movie\n                            from=\"tv\"\n                            key={index}\n                            index\n                            id={tv.id}\n                            poster={tv.poster_path}\n                            overview={tv.overview}\n                            title={tv.name}\n                            rating={tv.vote_average}\n                            vote_average={tv.vote_average}\n                            release_date={tv.first_air_date}\n                        />\n                    ))}\n                </MoviesContainer>\n\n\n            </Wrapper>\n        )\n\n    }\n\n    return (\n        <div>d</div>\n    )\n}\n   \n\nexport default Tv;","import React, {useState} from \"react\";\nimport { useQuery } from 'react-apollo-hooks';\nimport { PERSON_DETAIL } from \"../../queries\";\n\n\nconst PersonDetail = ({\n    match: {\n        params: { personId }\n    }\n}) =>{\n    const [language, setLanguage] = useState('ko-kr');\n\n    const {data,loading} = useQuery(PERSON_DETAIL,{\n        variables:{\n            personId:parseInt(personId),\n            language\n        }\n    });\n    if(loading){\n        return <div>load</div>\n    }\n    console.log(data);\n\n\n    return(\n        <div>\n            person detail\n        </div>\n    )\n}\n\nexport default PersonDetail","import {createGlobalStyle} from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n    ${reset};\n    @import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600,700');\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        background-color:${props=>props.theme.bgColor};\n        color:${props=>props.theme.blackColor};\n        font-size:14px;\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        padding-top: 120px;\n    }\n    a {\n        color:${props => props.theme.blueColor};\n        text-decoration:none;\n    }\n`;","const BOX_BORDER = \"1px solid #e6e6e6\";\nconst BORDER_RADIUS = \"4px\";\n\nexport default {\n    darkGreenColor: \"#0D1C23\",\n    maxWidth: \"1000px\",\n    bgColor: \"#FAFAFA\",\n    blackColor: \"#262626\",\n    darkGreyColor: \"#999\",\n    lightGreyColor: \"#c7c7c7\",\n    redColor: \"#ED4956\",\n    blueColor: \"#3897f0\",\n    darkBlueColor: \"#003569\",\n    boxBorder: \"1px solid #e6e6e6\",\n    borderRadius: \"4px\",\n    whiteBox: `border:${BOX_BORDER};\n             border-radius:${BORDER_RADIUS};\n             background-color:white;\n            `\n};","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport useInput from \"../../Hooks/useInput\";\n// import { Logo } from \"../Icons\";\nimport logo from \"../../assets/icons/logo.png\";\n\n\nconst HeaderBox = styled.header`\n    z-index:10;\n    width:100%;\n    position: fixed;\n    left:0;\n    top:0;\n`;\n\nconst Container = styled.div`\n   \n    display:flex;\n    align-items: center;\n    background-color: ${props => props.theme.darkGreenColor};\n    padding: 10px;\n    height:60px;\n    width:100%;\n    @media (min-width: 576px){\n        padding: 10px 95px;\n        height:110px;\n    }\n`;\nconst Logo = styled.img`\n    width:80px;\n    height: 80px;\n    margin-right:20px;\n`;\n\nconst CategoryBox = styled.div`\n    display:inherit;\n    align-items: center;\n\n`;\n\nconst Category = styled.div`\n    font-size:16px;\n    padding: 10px 0 ;\n    font-weight: 600;\n    color: #FFFFFF;\n    margin-right: 30px;\n`;\nconst SearchBox = styled.div`\n    width:100%;\n    height: 50px;\n\n`;\nconst SearchInput = styled.input`\n    border-radius: 0;\n    padding: 0 30px;\n    height: 46px;\n    box-sizing: border-box;\n    border: none !important;\n    width: 100%;\n    line-height: 1.2em;\n    color: #acacac;\n    font-size: 1rem;\n\n`;\n\nconst Header = () =>{\n    const term = useInput('');\n\n    const onKeyPress = async event =>{\n        const { which } = event;\n        if(which === 13){\n            event.preventDefault();\n            try{\n                console.log(term.value);\n            }catch{\n\n            }\n        }\n    }\n\n\n    return (\n        <HeaderBox>\n        <Container>\n            <Logo src={logo}/>\n            <CategoryBox>\n                <Link to={`/`}>\n                    <Category>\n                        영화\n            </Category>\n                </Link>\n                <Link to={`/tv`}>\n                    <Category>\n                        TV프로그램\n            </Category>\n                </Link>\n                <Link to={`/drama`}>\n                    <Category>\n                        인물\n            </Category>\n                </Link>\n            </CategoryBox>\n        </Container>\n        <SearchBox>\n            <SearchInput placeholder={'영화, TV 프로그램, 인물 검색'} {...term} onKeyPress={onKeyPress}/>\n        </SearchBox>\n    </HeaderBox>\n    )\n}\n    \n\n\nexport default Header;","import {useState} from \"react\";\n\nexport default defaultValue => {\n    const [value,setValue] = useState(defaultValue);\n\n    const onChange = e =>{\n        const{\n            target: {value}\n        }= e;\n        setValue(value);\n    };\n    return {value, onChange, setValue};\n}","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n// import { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport client from \"./apolloClient\";\nimport Home from \"./Home\";\nimport Detail from \"./Routes/Detail/Detail\";\nimport TvDetail from \"./Routes/Detail/TvDetail\";\nimport Tv from \"./Routes/Tv/Tv\";\nimport PersonDetail from \"./Routes/Detail/PersonDetail\"\nimport GlobalStyles from \"./Styles/GlobalStyles\";\nimport Theme from \"./Styles/Theme\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Header from './Components/Header/Header';\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 40px auto;\n  width: 100%;\n  /* max-width: ${props => props.theme.maxWidth}; */\n`;\n\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloHooksProvider client={client}>\n        <ThemeProvider theme={Theme}>\n          <Router>\n              <GlobalStyles />\n              <Header></Header>\n              <Wrapper>\n                <Route exact={true} path={\"/\"} component={Home} />\n                <Route path={\"/details/:movieId\"} component={Detail} />\n                <Route exact={true} path={\"/tv\"} component={Tv} />\n                <Route path={\"/tv/:tvId\"} component={TvDetail} />\n                <Route path={\"/person/:personId\"} component={PersonDetail} />\n                \n                \n                \n                \n              </Wrapper>\n          </Router>\n        </ThemeProvider>\n\n      </ApolloHooksProvider>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\n\n\nReactDOM.render(<MuiThemeProvider><App/></MuiThemeProvider>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}